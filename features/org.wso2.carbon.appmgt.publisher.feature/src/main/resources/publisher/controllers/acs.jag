<%
include("/extensions/webapp/modules/jagg/jagg.jag");

(function () {
	    var log = new Log(),
            configs = require('/config/publisher.js').config(),
            auditLog = require('/modules/auditLog/logger.js'),
            samlResponse = request.getParameter('SAMLResponse'),
            sessionId = session.getId(),
            samlRequest = request.getParameter('SAMLRequest'),
            relayState = request.getParameter('RelayState'),
            cookie= request.getHeader("Cookie"),
            sso = require('sso'),
	        server = require('carbon').server,
            samlRespObj;

        var keyStoreName = configs.ssoConfiguration.keyStoreName;
        var keyStorePassword = configs.ssoConfiguration.keyStorePassword;
        var identityAlias = configs.ssoConfiguration.identityAlias;
        var CarbonUtils = Packages.org.wso2.carbon.utils.CarbonUtils;
        if (keyStorePassword == null || keyStorePassword == "") {
            keyStorePassword = CarbonUtils.getServerConfiguration().getFirstProperty("Security.KeyStore.Password");
        }
        if (identityAlias == null || identityAlias == "") {
            identityAlias = CarbonUtils.getServerConfiguration().getFirstProperty("Security.KeyStore.KeyAlias");
        }
        if (keyStoreName == null || keyStoreName == "") {
            keyStoreName = CarbonUtils.getServerConfiguration().getFirstProperty("Security.KeyStore.Location");
        } else {
            keyStoreName = process.getProperty('carbon.home') + keyStoreName;
        }
        var keyStoreProps = {
                KEY_STORE_NAME: keyStoreName,
                KEY_STORE_PASSWORD: keyStorePassword,
                IDP_ALIAS: identityAlias
            },
            sso_sessions = application.get('sso_sessions'),
                attr = configs.ssoConfiguration;

    var caramel = require('caramel');
    var contextPath = caramel.configs().context;
    var reversProxyEnabled = caramel.configs().reverseProxyEnabled;
    var reverseProxyHost = caramel.configs().reverseProxyHost;

    if (reversProxyEnabled) {
        contextPath = reverseProxyHost + contextPath;
    }

    if (!sso_sessions) {
        application.put('sso_sessions', {});
        sso_sessions = application.get('sso_sessions');
    }

    if (samlResponse != null) {
        samlRespObj = sso.client.getSamlObject(samlResponse);
        if (!samlRespObj) {
            log.error('SAML response object validation failure.');
            response.sendError(401, 'You do not have permission to login to this application.Please contact your administrator and request permission.');
            return;
        }
        if (!sso.client.isLogoutResponse(samlRespObj)) {
            var MultitenantUtils = Packages.org.wso2.carbon.utils.multitenancy.MultitenantUtils;
            var MultitenantConstants = Packages.org.wso2.carbon.base.MultitenantConstants;
            var sessionObj = sso.client.decodeSAMLLoginResponse(samlRespObj, samlResponse, sessionId);
            var domainName = MultitenantUtils.getTenantDomain(sessionObj.loggedInUser);

            //load tenant registry for non super tenant users
            if (domainName != null && !MultitenantConstants.SUPER_TENANT_DOMAIN_NAME.equals(domainName)) {
                jagg.module("manager").loadTenantRegistry(String(domainName));
            }

            if (!sso.client.validateSamlResponse(samlRespObj, attr, keyStoreProps)) {
                log.error('SAML response object validation failure.');
                response.sendError(401, 'You do not have permission to login to this application.Please contact your administrator and request permission.');
                return;
            }

            if (sessionObj.sessionIndex != null || sessionObj.sessionIndex != 'undefined') {

                if (domainName != null && !MultitenantConstants.SUPER_TENANT_DOMAIN_NAME.equals(domainName)) {
                    var service = server.osgiService('org.wso2.carbon.utils.ConfigurationContextService');
                    var ctx = service.getServerConfigContext();
                    var TenantAxisUtils = org.wso2.carbon.core.multitenancy.utils.TenantAxisUtils;
                    TenantAxisUtils.setTenantAccessed(domainName, ctx);
                }

                jagg.setUser({username: sessionObj.loggedInUser});
                var tenantId = carbon.server.tenantId({
                    domain: domainName
                });

                session.put("LOGGED_IN_USER", sessionObj.loggedInUser);
                session.put("Loged", "true");
                session.put("tenantId", tenantId);
                log.info(stringify(sessionObj.loggedInUser));


                //sso_sessions[sessionObj.sessionIndex] = sessionObj.sessionId;

                var identityUtil = Packages.org.wso2.carbon.identity.core.util.IdentityTenantUtil;
                var tenantId = identityUtil.getTenantIdOfUser(sessionObj.loggedInUser);
                var registryService = server.osgiService('org.wso2.carbon.registry.core.service.RegistryService');
                var commonUtil = Packages.org.wso2.carbon.governance.lcm.util.CommonUtil;
                commonUtil.addDefaultLifecyclesIfNotAvailable(registryService.getConfigSystemRegistry(tenantId),
                        commonUtil.getRootSystemRegistry(tenantId));

                log.debug("session index :: " + sessionObj.sessionIndex);
                log.debug("session :: " + sessionObj.sessionId);
                log.debug("real session :: " + session.getId());

                //sso_sessions[sso_sessions[sessionObj.sessionIndex] = sessionObj.sessionId] = sessionObj.sessionIndex;
                sso_sessions[sessionObj.sessionId] = sessionObj.sessionIndex;
                username = username + "";
                var username = sessionObj.loggedInUser;
                var role = require('/modules/role.js').checkeRole(username, session);

                if (role) {
                    auditLog.writeLog(tenantId, sessionObj.loggedInUser, "User SignedIn", "", "", "", "");
                    var user = require('store').user;
                    log.debug('user is set :::' + sessionObj.loggedInUser);

                    setAuthenticatedCookieToIDP(samlResponse);
                    response.sendRedirect(contextPath);

                } else {
                    log.warn('User ' + sessionObj.loggedInUser + ' does not have permission to access the publisher application.Make sure the user has the publisher role.');
                    response.sendError(403, 'You do not have permission to login to this application.Please contact your administrator and request permission.');
                }
            }
        } else {
            session.invalidate();
            response.sendRedirect(contextPath);
        }
    }

    // if saml request is a log out request, then invalidate session.
    if (samlRequest != null) {
        var index = sso.client.decodeSAMLLogoutRequest(sso.client.getSamlObject(samlRequest));
        var jSessionId = application.get('sso_sessions')[index];
        delete application.get('sso_sessions')[index];
	log.debug('portal Session Id :::' + jSessionId);
	session.invalidate();
    }
}());

/**
 * Retrieve a cookie which authenticate IDP and add to session.
 * This will be used in Service provider/XACML policies related IDP admin services for authentication
 * @param samlResponse
 */
function setAuthenticatedCookieToIDP(samlResponse) {
    var log = new Log();
    try {
        var ws = require("ws");
        var requestIDP = new ws.WSRequest();
        var options = new Array();
        options.useSOAP = 1.2;
        options.action = "urn:login";
        var manager = jagg.module("manager");
        var endPoint = manager.getAuthServerURL() + "SAML2SSOAuthenticationService";
        var payload = '<sso:login xmlns:sso="http://sso.saml2.authenticator.identity.carbon.wso2.org"><sso:authDto><xsd:response xmlns:xsd="http://dto.sso.saml2.authenticator.identity.carbon.wso2.org/xsd">'
                      + samlResponse + '</xsd:response></sso:authDto></sso:login>';
        requestIDP.open(options, endPoint, false);
        requestIDP.send(payload);
        var responseIDP = requestIDP.responseE4X;
        var adminSession = requestIDP.getResponseHeader("Set-Cookie");
        session.put("idp-authenticated-cookie", adminSession);
    }
    catch (e) {
        log.error("Error occurred while calling SAML2SSOAuthenticationService and retrieving the cookie to authenticate IdP");
    }
};
%>
